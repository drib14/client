{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\jhond\\\\Documents\\\\sample\\\\client\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// App.js\nimport React, { useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\nimport ForgotPassword from \"./components/ForgotPassword\";\nimport ResetPassword from \"./components/ResetPassword\";\nimport ProtectedRoute from \"./components/ProtectedRoute\"; // Import ProtectedRoute for authentication checks\nimport LoadingModal from \"./components/LoadingModal\"; // Import LoadingModal for the loading screen\nimport Home from \"./components/pages/Home\"; // Import Home page component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoading, setIsLoading] = useState(true); // State for managing loading state\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Track authentication status\n\n  useEffect(() => {\n    // Simulate a loading delay (like fetching initial data)\n    setTimeout(() => {\n      setIsLoading(false); // Hide loading modal after 3 seconds\n      // Check if the user is authenticated (e.g., check for a token in localStorage)\n      const token = localStorage.getItem(\"authToken\"); // Assuming you store a token in localStorage\n      if (token) {\n        setIsAuthenticated(true);\n      } else {\n        setIsAuthenticated(false);\n      }\n    }, 3000);\n  }, []);\n  const handleLogout = () => {\n    // Clear the authentication status (e.g., clear token from localStorage)\n    localStorage.removeItem(\"authToken\");\n    setIsAuthenticated(false);\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: [/*#__PURE__*/_jsxDEV(LoadingModal, {\n      isVisible: isLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: isAuthenticated ?\n        /*#__PURE__*/\n        // If the user is authenticated, redirect them to the home page\n        _jsxDEV(Navigate, {\n          to: \"/\",\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/signup\",\n        element: /*#__PURE__*/_jsxDEV(Signup, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/forgot-password\",\n        element: /*#__PURE__*/_jsxDEV(ForgotPassword, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 49\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/reset-password\",\n        element: /*#__PURE__*/_jsxDEV(ResetPassword, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 48\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        element: /*#__PURE__*/_jsxDEV(ProtectedRoute, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 25\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/\",\n          element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 36\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/logout\",\n        element: /*#__PURE__*/_jsxDEV(Navigate, {\n          to: \"/login\",\n          replace: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"WRXjUPutFw5O39gJHBZtWrpgCxI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Routes","Route","Navigate","Login","Signup","ForgotPassword","ResetPassword","ProtectedRoute","LoadingModal","Home","jsxDEV","_jsxDEV","App","_s","isLoading","setIsLoading","isAuthenticated","setIsAuthenticated","setTimeout","token","localStorage","getItem","handleLogout","removeItem","children","isVisible","fileName","_jsxFileName","lineNumber","columnNumber","path","element","to","replace","_c","$RefreshReg$"],"sources":["C:/Users/jhond/Documents/sample/client/src/App.js"],"sourcesContent":["// App.js\nimport React, { useState, useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Routes,\n  Route,\n  Navigate,\n} from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\nimport ForgotPassword from \"./components/ForgotPassword\";\nimport ResetPassword from \"./components/ResetPassword\";\nimport ProtectedRoute from \"./components/ProtectedRoute\"; // Import ProtectedRoute for authentication checks\nimport LoadingModal from \"./components/LoadingModal\"; // Import LoadingModal for the loading screen\nimport Home from \"./components/pages/Home\"; // Import Home page component\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true); // State for managing loading state\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Track authentication status\n\n  useEffect(() => {\n    // Simulate a loading delay (like fetching initial data)\n    setTimeout(() => {\n      setIsLoading(false); // Hide loading modal after 3 seconds\n      // Check if the user is authenticated (e.g., check for a token in localStorage)\n      const token = localStorage.getItem(\"authToken\"); // Assuming you store a token in localStorage\n      if (token) {\n        setIsAuthenticated(true);\n      } else {\n        setIsAuthenticated(false);\n      }\n    }, 3000);\n  }, []);\n\n  const handleLogout = () => {\n    // Clear the authentication status (e.g., clear token from localStorage)\n    localStorage.removeItem(\"authToken\");\n    setIsAuthenticated(false);\n  };\n\n  return (\n    <Router>\n      {/* Show the LoadingModal while isLoading is true */}\n      <LoadingModal isVisible={isLoading} />\n\n      <Routes>\n        {/* Public Routes: Accessible by anyone */}\n        <Route\n          path=\"/login\"\n          element={\n            isAuthenticated ? (\n              // If the user is authenticated, redirect them to the home page\n              <Navigate to=\"/\" replace />\n            ) : (\n              <Login />\n            )\n          }\n        />\n        <Route path=\"/signup\" element={<Signup />} />\n        <Route path=\"/forgot-password\" element={<ForgotPassword />} />\n        <Route path=\"/reset-password\" element={<ResetPassword />} />\n\n        {/* Protected Routes: Accessible only when authenticated */}\n        <Route element={<ProtectedRoute />}>\n          <Route path=\"/\" element={<Home />} />\n          {/* Add more protected routes here */}\n          {/* <Route path=\"/profile\" element={<Profile />} /> */}\n          {/* <Route path=\"/story\" element={<StoryPage />} /> */}\n        </Route>\n\n        {/* Route for logging out */}\n        <Route path=\"/logout\" element={<Navigate to=\"/login\" replace />} />\n      </Routes>\n    </Router>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}